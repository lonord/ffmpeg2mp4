#!/usr/bin/env node

/**
 * 使用ffmpeg转换文件格式的自动化脚本，
 * 对ffmpeg命令做了简单封装，
 * 支持单个文件以及整个文件夹全部转换，
 * 输出实时进度。
 *
 * Created by lonord on 2016/10/9.
 */

const fs = require('fs');
const path = require('path');
const spawn = require('child_process').spawn;
const async = require('async');

const ffmpegPath = '/usr/local/bin/ffmpeg';

function main() {
    if (process.argv.length < 3) {
        console.log('缺少参数!');
        console.log('用法: ffmpeg2mp4 输入文件/目录 [输出路径]');
        return;
    }
    let source = process.argv[2];
    let targetDir;
    let sourceStat = fs.statSync(source);
    let files = [];
    if (sourceStat.isDirectory()) {
        targetDir = source;
        let names = fs.readdirSync(source);
        names.forEach((name) => {
            let p = path.join(source, name);
            let fileStat = fs.statSync(p);
            if (fileStat.isFile()) {
                files.push(p);
            }
        });
    }
    else if (sourceStat.isFile()) {
        targetDir = path.dirname(source);
        files.push(source);
    }
    else {
        throw new Error(`输入类型错误 ${source}`);
    }
    if (process.argv.length >= 4) {
        targetDir = process.argv[3];
    }
    let index = 0;
    let successCount = 0;
    let failCount = 0;
    async.whilst(
        function () { return index < files.length; },
        function (callback) {
            let file = files[index];
            let fileName = path.basename(file);
            if (files.length > 1) {
                console.log(`开始转换 ${fileName} (${index + 1}/${files.length})...`);
            }
            else {
                console.log(`开始转换 ${fileName} ...`);
            }
            transCodeFile(file, targetDir, (percent, speed, left) => {
                clearLine();
                process.stdout.write(`进度: ${percent}%\t速度: ${speed}x\t剩余时间: ${left}`);
            }, (success) => {
                if (success) {
                    clearLine();
                    process.stdout.write('转换成功!\n');
                    successCount++;
                }
                else {
                    failCount++;
                    clearLine();
                    process.stdout.write('转换失败!\n');
                }
                callback();
            });
            index++;
        },
        function () {
            if (files.length > 1) {
                console.log(`全部转换结束 成功:${successCount} 失败:${failCount}`);
            }
            console.log(`输出目录:${targetDir}`);
        }
    );

    /**
     *  清除当前行
     */
    function clearLine() {
        process.stdout.write('\r');
        if (process.stdout.isTTY) {
            for (let i = 0; i < process.stdout.columns; i++) {
                process.stdout.write(' ');
            }
            process.stdout.write('\r');
        }
    }
}

/**
 * 转换文件格式函数
 * @param file 输入文件绝对路径
 * @param targetDir 输出文件目录绝对路径
 * @param progressCallback 报告进度回调函数
 * @param completeCallback 完成回调函数
 */
function transCodeFile(file, targetDir, progressCallback, completeCallback) {
    let outPath = path.join(targetDir, path.basename(file));
    let startTime = new Date().getTime();
    outPath = outPath.substr(0, outPath.length - path.extname(outPath).length) + '.mp4';
    const ffmpeg = spawn(ffmpegPath, ['-i', file, '-y', outPath]);
    let totalTime = 0;
    ffmpeg.stderr.on('data', (data) => {
        let dataStr = data + '';
        let durIdx = dataStr.indexOf('Duration:');
        if (durIdx > 0) {
            let durStr = dataStr.substr(durIdx + 10, 11);
            totalTime = parseTime(durStr);
        }
        let timeIdx = dataStr.indexOf(' time=');
        if (timeIdx > 0) {
            let timeStr = dataStr.substr(timeIdx + 6, 11);
            let time = parseTime(timeStr);
            if (time <= totalTime) {
                let per = Math.floor(time * 1000 / totalTime) / 10;
                if (/^[0-9]+$/.test(per)) {
                    per += '.0';
                }
                let timeUsage = new Date().getTime() - startTime;
                let leftTime = timeUsage / per * (100 - per);
                let leftTimeStr = formatTime(Math.floor(leftTime / 1000));
                let speed = Math.floor(time * 100 / timeUsage) / 10;
                if (/^[0-9]+$/.test(speed)) {
                    speed += '.0';
                }
                progressCallback(per, speed, leftTimeStr);
            }
        }
    });
    ffmpeg.on('exit', (code) => {
        if (code == 0) {
            completeCallback(true);
        }
        else {
            completeCallback(false);
        }
    });

    /**
     * 将时间由 01:23:45.67 的形式转换为整数
     * @param durStr
     * @returns {number}
     */
    function parseTime(durStr) {
        let time = parseInt(durStr.substr(0, 2)) * 3600 * 100;
        time += parseInt(durStr.substr(0, 2)) * 3600 * 100;
        time += parseInt(durStr.substr(3, 2)) * 60 * 100;
        time += parseInt(durStr.substr(6, 2)) * 100;
        time += parseInt(durStr.substr(9, 2));
        return time;
    }

    /**
     * 将时间由整秒数转换为hh:mm:ss
     */
    function formatTime(time) {
        let sec = Math.floor(time % 60);
        let min = Math.floor(Math.floor(time / 60) % 60);
        let hour = Math.floor(time / 3600);
        let secStr = sec > 9 ? '' + sec : '0' + sec;
        let minStr = min > 9 ? '' + min : '0' + min;
        let hourStr = hour > 9 ? '' + hour : '0' + hour;
        let str = `${hourStr}:${minStr}:${secStr}`;
        return str;
    }
}

try {
    main();
}
catch(e) {
    console.log(e.message);
}
